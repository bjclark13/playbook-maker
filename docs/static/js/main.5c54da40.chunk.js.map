{"version":3,"sources":["BoardDrag.js","App.js","serviceWorker.js","index.js"],"names":["BoardDrag","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDragStart","e","state","drawMode","target","setAttrs","handleDragEnd","index","type","console","log","to","duration","scaleX","scaleY","thing","x","evt","clientX","y","clientY","setState","defineProperty","handleMouseMove","editing","cursor","stageRef","getStage","getPointerPosition","push","handleMouseUp","lines","points","styles","size","editorValues","textes","text","exes","ohs","arrows","_this2","total","react_default","a","createElement","ReactKonva","width","window","innerWidth","height","innerHeight","onMouseMove","onMouseUp","ref","onClick","map","oh","radius","fill","stroke","shadowColor","Math","random","elem","fontSize","ex","key","draggable","onDragStart","onDragEnd","line","tension","arrow","Component","App","className","src_BoardDrag","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c54da40.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Circle, Line, Arrow, Text } from 'react-konva';\n\nclass BoardDrag extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.styles = {\n      size: 20\n    };\n    \n    this.editorValues = {\n      textes: [\n        {\n          text: 'QB',\n        },\n        {\n          text: 'HB',\n        },\n        {\n          text: 'FB',\n        },\n        {\n          text: 'C',\n        },\n        {\n          text: 'Y',\n        },\n        {\n          text: 'Z',\n        },\n      ],\n      exes: [ {} ],\n      ohs: [ {} ]\n    };\n    \n    this.state = {        \n      textes: [],\n      exes: [],\n      ohs: [],\n      lines: [],\n      arrows: [],\n      drawMode: false\n    };\n  }\n  \n  handleDragStart = e => {\n    if ( !this.state.drawMode ) {\n      e.target.setAttrs({\n        // shadowOffset: {\n        //   x: 15,\n        //   y: 15\n        // },\n        // scaleX: 1.5,\n        // scaleY: 1.5\n      });      \n    }\n\n  };\n  \n  handleDragEnd = (e, index, type) => {\n    if ( !this.state.drawMode ) {\n      console.log(e);\n      e.target.to({\n        duration: 0.5,\n        //  easing: Konva.Easings.ElasticEaseOut,\n        scaleX: 1,\n        scaleY: 1,\n        // shadowOffsetX: 5,\n        // shadowOffsetY: 5\n      });  \n\n      let thing = this.state[type];\n      thing[index].x = e.evt.clientX;\n      thing[index].y = e.evt.clientY;\n\n      this.setState({ [type]: thing });\n    }\n  };\n  \n  handleMouseMove = e => {\n    if ( this.state.drawMode ) {\n      // there are several ways to get stage reference\n      if ( this.state.editing ) {\n        let editing = this.state.editing;\n        \n        // first is\n        let stage = this.stageRef.getStage();\n        let cursor = stage.getPointerPosition();\n        \n        editing.push(cursor.x, cursor.y);\n        \n        this.setState({\n          editing: editing\n        });\n      }\n    }\n  };\n  \n  handleMouseUp = e => {\n    if ( this.state.drawMode && this.state.editing ) {\n      // first is\n      let stage = this.stageRef.getStage();\n      \n      let lines = this.state.lines;\n      \n      lines.push({\n        points: this.state.editing\n      })\n            \n      this.setState({\n        lines: lines, \n        editing: false\n      })\n    }\n  };\n  \n  \n  render() {\n    var total = 0;\n    \n    return (\n      <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      onMouseMove={this.handleMouseMove}\n      onMouseUp={this.handleMouseUp}\n      ref={ref => {\n        this.stageRef = ref;\n      }}\n      >\n      <Layer>\n      \n      <Text y={5} x={ 50 } text = \"Click an icon to add to the play\" />\n      \n      {\n        this.state.drawMode ? \n        <Text y={150} x={ 50 } text = \"Mode: Drawing: Click on an icon in the play to draw a route\" />\n        :\n        <Text y={150} x={ 50 } text = \"Mode: Dragging: Click on an icon to move them around\" />\n      }\n\n      <Text y={170} x={ 50 } onClick={ () => this.setState( { drawMode: !this.state.drawMode} ) } text=\"Switch Mode\" />\n\n      {\n        this.editorValues.ohs.map( (oh, index) => {\n          total ++; \n          \n          return(\n            <Circle \n            x={total * 60} \n            y={ 35 } \n            radius={10} \n            fill=\"white\"\n            stroke=\"black\"\n            shadowColor={'black'}\n            onClick={ () =>  {\n              var ohs = this.state.ohs;\n              \n              ohs.push({\n                x: Math.random() * window.innerWidth,\n                y: Math.random() * window.innerHeight\n              });\n              \n              this.setState({\n                ohs: ohs\n              })\n            }\n          }\n          />\n          );\n        }, this)\n      }\n      \n      {\n        this.editorValues.textes.map( (elem, index) => {\n          total ++; \n          \n          return( \n            <Text \n            fontSize={this.styles.size}\n            text={elem.text} \n            x={total * 60} \n            y={ 25 } \n            onClick={ () =>  {\n              var textes = this.state.textes;\n              \n              textes.push({\n                x: Math.random() * window.innerWidth,\n                y: Math.random() * window.innerHeight,\n                text: elem.text\n              });\n              \n              this.setState({\n                textes: textes\n              })\n            }\n          }\n          />\n          )\n        })\n      }\n      \n      {\n        this.editorValues.exes.map( (ex, index) => {\n          total ++; \n          \n          return( \n            <Text \n            fontSize={this.styles.size}\n            key={index}\n            text=\"X\" \n            x={total * 60} \n            y={ 25 } \n            onClick={ () =>  {\n              var exes = this.state.exes;\n              \n              exes.push({\n                x: Math.random() * window.innerWidth,\n                y: Math.random() * window.innerHeight\n              });\n              \n              this.setState({\n                exes: exes\n              })\n            }\n          }\n          />\n          )\n        })\n      }\n      \n      \n      { /** Live State */}\n      {\n        this.state.ohs.map( (oh, index) => {\n          return( \n            <Circle \n            x={ oh.x } \n            y={ oh.y } \n            radius={10} \n            fill=\"#fff\"\n            stroke=\"black\"\n            draggable={!this.state.drawMode}\n            key={index}\n            onDragStart={ this.handleDragStart }\n            onDragEnd={ e => this.handleDragEnd(e, index, 'ohs') }\n            shadowColor={'black'}\n            onClick={ ()  => this.setState( { editing: [oh.x, oh.y] }) }\n            />\n            )\n          })\n        }\n        \n        {\n          this.state.lines.map( (line, index) => {\n            return(\n              <Line\n              points={line.points}\n              stroke='black'\n              tension={1}\n              />\n              )\n            } \n            )\n          }\n          \n          {\n            this.state.arrows.map( (arrow, index) => {\n              return(\n                <Line\n                points={arrow.points}\n                stroke='black'\n                tension={1}\n                />\n                )\n              }\n              )\n            }\n            \n            {\n              this.state.textes.map( (elem, index) => {\n                return( \n                  <Text \n                  fontSize={this.styles.size}\n                  draggable={!this.state.drawMode}\n                  key={index}\n                  onDragStart={this.handleDragStart}\n                  onDragEnd={ e => this.handleDragEnd(e, index, 'textes') }\n                  text={elem.text} \n                  x={ elem.x } \n                  y={ elem.y } \n                  onClick={ ()  => this.setState( { editing: [elem.x, elem.y] }) }\n                  />\n                  )\n                })\n              }\n              \n              {\n                this.state.exes.map( (ex, index) => {\n                  return( \n                    <Text \n                    fontSize={this.styles.size}\n                    draggable={!this.state.drawMode}\n                    key={index}\n                    onDragStart={this.handleDragStart}\n                    onDragEnd={ e => this.handleDragEnd(e, index, 'exes') }\n                    text=\"X\" \n                    x={ ex.x } \n                    y={ ex.y } \n                    onClick={ ()  => this.setState( { editing: [ex.x, ex.y] }) }\n                    />\n                    )\n                  })\n                }\n                </Layer>\n                </Stage>\n                );\n              }\n            }\n            \n            export default BoardDrag;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport BoardDrag from './BoardDrag';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Board /> */}\n\n        <BoardDrag />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}