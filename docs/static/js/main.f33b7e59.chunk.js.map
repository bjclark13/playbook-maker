{"version":3,"sources":["drag/Icons.jsx","Editor.js","BoardDrag.js","App.js","serviceWorker.js","index.js"],"names":["Square","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","ReactKonva","assign","width","height","cornerRadius","stroke","fill","shadowColor","props","React","Component","Oh","_React$Component2","radius","Ex","_React$Component3","Icons_CustomText","text","CustomText","_React$Component4","fontSize","Editor","_this","call","state","textes","exes","ohs","squares","_this2","total","y","x","map","oh","index","Icons_Oh","onClick","addToBoard","ex","Icons_Ex","Icons_Square","elem","BoardDrag","handleDragStart","e","drawMode","target","setAttrs","roundToNearest","roundTo","parseInt","saveProgress","activeState","editing","window","sessionStorage","setItem","JSON","stringify","getLocalChanges","initialState","getItem","setState","parse","publishChanges","removeItem","handleDragEnd","type","to","duration","scaleX","scaleY","thing","currentTarget","_lastPos","defineProperty","handleMouseMove","cursor","stageRef","getStage","getPointerPosition","push","handleMouseUp","_this$setState2","lines","points","item","items","innerWidth","Math","random","innerHeight","arrows","onMouseMove","onMouseUp","ref","src_Editor","draggable","onDragStart","onDragEnd","square","line","tension","arrow","App","className","src_BoardDrag","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f33b7e59.chunk.js","sourcesContent":["import React from 'react';\nimport { Circle, Text, Rect } from 'react-konva';\n\nexport class Square extends React.Component {\n    render() {\n        return(\n            <Rect \n                width={20} \n                height={20} \n                cornerRadius={2} \n                stroke=\"black\" \n                fill=\"white\" \n                shadowColor={'black'}\n                {...this.props}\n            />\n        )\n    }\n}\nexport class Oh extends React.Component{\n    render() {\n        return(\n            <Circle \n                radius={9} \n                fill=\"white\"\n                stroke=\"black\"\n                shadowColor={'black'}\n                {...this.props}\n          />\n        );        \n    }\n};\n\nexport class Ex extends React.Component{\n    render() {\n        return(\n            <CustomText {...this.props}  text=\"X\" />\n        );         \n    }\n};\n\nexport class CustomText extends React.Component{\n    render() {\n        return(\n            <Text \n                fontSize={25}\n                {...this.props}\n          />\n        );        \n    }\n};\n\n","import React from 'react';\nimport { Oh, CustomText, Ex, Square } from './drag/Icons';\nimport { Text, Layer } from 'react-konva';\n\nclass Editor extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            textes: [\n                {\n                    text: 'QB',\n                },\n                {\n                    text: 'HB',\n                },\n                {\n                    text: 'FB',\n                },\n                {\n                    text: 'C',\n                },\n                {\n                    text: 'Y',\n                },\n                {\n                    text: 'Z',\n                },\n            ],\n            exes: [{}],\n            ohs: [{}],\n            squares: [{}]\n        };\n    }\n    \n    render() {\n        var total = 0;\n\n        return(\n            <Layer> \n            <Text y={5} x={ 50 } text = \"Editor: Click an icon to add to the play\" />\n            \n            {\n                this.state.ohs.map( (oh, index) => {\n                    total ++; \n                    \n                    return(\n                        <Oh \n                        x={total * 60} \n                        y={ 35 } \n                        onClick={ () => this.props.addToBoard('ohs')\n                    }\n                    />\n                    );\n                }, this)\n            }\n            \n            {\n                this.state.exes.map( (ex, index) => {\n                    total ++; \n\n                    return( \n                        <Ex \n                        key={index}\n                        x={total * 60} \n                        y={ 25 } \n                        onClick={ () => this.props.addToBoard('ohs') }\n                    />\n                    )\n                })\n            }\n            \n            {\n                this.state.squares.map( (ex, index) => {\n                    total ++; \n\n                    return( \n                        <Square \n                            key={index}\n                            x={total * 60} \n                            y={ 25 } \n                            onClick={ () => this.props.addToBoard('squares')\n                        }\n                    />\n                    )\n                })\n            }\n\n            {\n                this.state.textes.map( (elem, index) => {\n                    total ++; \n\n                    return( \n                        <CustomText\n                        text={elem.text} \n                        x={total * 60} \n                        y={ 25 } \n                        onClick={ () => this.props.addToBoard('textes', {text: elem.text} )\n                    }\n                    />\n                    )\n                })\n            }\n            </Layer>\n            );\n        }\n    } \n    \n    export default Editor;","import React, { Component } from 'react';\nimport Konva from 'konva';\nimport { Stage, Layer, Line, Arrow, Text } from 'react-konva';\nimport { Oh, CustomText, Ex, Square } from './drag/Icons';\nimport Editor from './Editor';\n\nclass BoardDrag extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {        \n      textes: [],\n      exes: [],\n      ohs: [],\n      lines: [],\n      arrows: [],\n      squares: [],\n      drawMode: false, // can be false, line or arrow\n    };\n  }\n  \n  componentDidMount() {\n    this.getLocalChanges();\n  }\n  \n  handleDragStart = e => {\n    if ( !this.state.drawMode ) {\n      e.target.setAttrs({\n        // shadowOffset: {\n        //   x: 15,\n        //   y: 15\n        // },\n        // scaleX: 1.5,\n        // scaleY: 1.5\n      });      \n    }\n    \n  };\n  \n  roundToNearest = (x, roundTo) => {\n    return (x % roundTo) >= (roundTo/2) ? parseInt(x / roundTo) * roundTo + roundTo : parseInt(x / roundTo) * roundTo;\n  }\n  \n  saveProgress = () => {\n    let activeState = this.state;\n    delete activeState.drawMode;\n    delete activeState.editing;\n    \n    window.sessionStorage.setItem( 'playbook-active', JSON.stringify(this.state) );\n  };\n  \n  getLocalChanges = () => {\n    var initialState;\n    \n    if ( initialState = window.sessionStorage.getItem('playbook-active') ) {\n      this.setState(JSON.parse(initialState));\n    }\n  };\n  \n  publishChanges = () => {\n    window.sessionStorage.removeItem('playbook-active');\n  };\n  \n  handleDragEnd = (e, index, type) => {\n    if ( !this.state.drawMode ) {\n      e.target.to({\n        duration: 0.5,\n        //  easing: Konva.Easings.ElasticEaseOut,\n        scaleX: 1,\n        scaleY: 1,\n        // shadowOffsetX: 5,\n        // shadowOffsetY: 5\n      });  \n      \n      let thing = this.state[type];\n      \n      thing[index].x = e.currentTarget._lastPos.x; // this.roundToNearest(e.evt.clientX, 1);\n      thing[index].y =  e.currentTarget._lastPos.y; //this.roundToNearest(e.evt.clientY, 1);\n      \n      this.setState({ [type]: thing }, this.saveProgress);\n    }\n  };\n  \n  handleMouseMove = e => {\n    if ( this.state.drawMode ) {\n      // there are several ways to get stage reference\n      if ( this.state.editing ) {\n        let editing = this.state.editing;\n        \n        // first is\n        let stage = this.stageRef.getStage();\n        let cursor = stage.getPointerPosition();\n        \n        editing.push(cursor.x, cursor.y);\n        \n        this.setState({\n          editing: editing\n        });\n      }\n    }\n  };\n  \n  handleMouseUp = e => {\n    if ( this.state.drawMode && this.state.editing ) {\n      // first is\n      let stage = this.stageRef.getStage();\n      \n\n\n      let lines = this.state[this.state.drawMode];\n      \n      lines.push({\n        points: this.state.editing\n      })\n      \n      this.setState({\n        [this.state.drawMode]: lines, \n        editing: false\n      })\n    }\n  };\n  \n  addToBoard = (type, item) => {\n    var items = this.state[type];\n    \n    var item = Object.assign({\n      x: (window.innerWidth / 2) - 150 + (Math.random() * 300),\n      y: window.innerHeight / 2\n    }, item);\n    \n    items.push(item);\n    \n    this.setState({\n      [type]: items\n    })\n  };\n  \n  render() {\n    var total = 0;\n    \n    return (\n      <Stage \n      width={window.innerWidth} \n      height={window.innerHeight}\n      onMouseMove={this.handleMouseMove}\n      onMouseUp={this.handleMouseUp}\n      ref={ref => {\n        this.stageRef = ref;\n      }}\n      >\n      \n      <Editor addToBoard={this.addToBoard} />\n      \n      <Layer>\n      \n      {\n        this.state.drawMode ? \n        <Text y={150} x={ 50 } text = \"Mode: Drawing: Click on an icon in the play to draw a route\" />\n        :\n        <Text y={150} x={ 50 } text = \"Mode: Dragging: Click on an icon to move them around\" />\n      }\n    \n      <Text y={190} x={ 50 } onClick={ () => this.setState( { drawMode: 'lines'} ) } text=\"Draw Lines\" />\n      <Text y={210} x={ 50 } onClick={ () => this.setState( { drawMode: 'arrows'} ) } text=\"Draw Arrows\" />   \n      {/* <Text y={170} x={ 50 } onClick={ () => this.setState( { drawMode: !this.state.drawMode} ) } text=\"Draw Dotted Lines\" />\n      <Text y={170} x={ 50 } onClick={ () => this.setState( { drawMode: !this.state.drawMode} ) } text=\"Draw Blocking Lines\" /> */}\n      <Text y={230} x={ 50 } onClick={ () => this.setState( { drawMode: false } ) } text=\"Switch to Drawing Mode\" />  \n      \n      {\n        this.state.ohs.map( (oh, index) => {\n          return( \n            <Oh \n            x={ oh.x } \n            y={ oh.y } \n            draggable={!this.state.drawMode}\n            key={index}\n            onDragStart={ this.handleDragStart }\n            onDragEnd={ e => this.handleDragEnd(e, index, 'ohs') }\n            onClick={ ()  => this.setState( { editing: [oh.x, oh.y] }) }\n            />\n            )\n          })\n        }\n        \n        {\n          this.state.squares.map( (square, index) => {\n            return( \n              <Square \n              x={ square.x } \n              y={ square.y } \n              draggable={!this.state.drawMode}\n              key={index}\n              onDragStart={ this.handleDragStart }\n              onDragEnd={ e => this.handleDragEnd(e, index, 'squares') }\n              onClick={ ()  => this.setState( { editing: [square.x, square.y] }) }\n              />\n              )\n            })\n          }\n          \n          {\n            this.state.lines.map( (line, index) => {\n              return(\n                <Line\n                points={line.points}\n                stroke='black'\n                tension={1}\n                />\n                )\n              } \n              )\n            }\n            \n            {\n              this.state.arrows.map( (arrow, index) => {\n                return(\n                  <Arrow\n                  points={arrow.points}\n                  stroke='black'\n                  fill='black'\n                  tension={1}\n                  />\n                  )\n                }\n                )\n              }\n              \n              {\n                this.state.textes.map( (elem, index) => {\n                  return( \n                    <CustomText \n                    draggable={!this.state.drawMode}\n                    key={index}\n                    onDragStart={this.handleDragStart}\n                    onDragEnd={ e => this.handleDragEnd(e, index, 'textes') }\n                    text={elem.text} \n                    x={ elem.x } \n                    y={ elem.y } \n                    onClick={ ()  => this.setState( { editing: [elem.x, elem.y] }) }\n                    />\n                    )\n                  })\n                }\n                \n                {\n                  this.state.exes.map( (ex, index) => {\n                    return( \n                      <Ex \n                      draggable={!this.state.drawMode}\n                      key={index}\n                      onDragStart={this.handleDragStart}\n                      onDragEnd={ e => this.handleDragEnd(e, index, 'exes') }\n                      text=\"X\" \n                      x={ ex.x } \n                      y={ ex.y } \n                      onClick={ ()  => this.setState( { editing: [ex.x, ex.y] }) }\n                      />\n                      )\n                    })\n                  }\n                  </Layer>\n                  </Stage>\n                  );\n                }\n              }\n              \n              export default BoardDrag;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport BoardDrag from './BoardDrag';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Board /> */}\n\n        <BoardDrag />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}